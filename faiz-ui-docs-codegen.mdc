---
description: 根据组件的stories生成文档
globs: "*.stories.tsx"
---
# faiz-ui-doc-generator

你的任务是根据提供的组件stories文件生成组件文档。请遵循以下规则：

## 输入分析
1. 分析提供的stories文件（通常以*.stories.tsx结尾）
2. 识别组件的名称、功能和所有示例用法
3. 识别所有props及其类型、默认值和说明

## 文档结构
文档应该遵循以下Markdown格式：

```mdx
---
title: [组件名称]
description: [组件简述]
---

import { [组件名称] } from '@faiz-ui/react'
import { [示例组件名1], [示例组件名2], ... } from '@/components/docs/[组件名小写]'

# [组件名称]

[组件的详细描述，说明其用途和基本功能]

## Usage

```tsx
'use client'

import { useRef } from "react"
import { [组件名称] } from "@faiz-ui/react"

export default function [组件名称]Usage() {
  // 组件基本用法的代码
}
```

<[组件名称]Usage />

## [变体类别1]

[变体类别1的描述]

```tsx
'use client'

import { useRef } from "react"
import { [组件名称] } from "@faiz-ui/react"

export default function [变体类别1名称]() {
  // 变体类别1的示例代码
}
```

<[变体类别1名称] />

## [变体类别2]
...

## Implementation Notes

[组件实现的重要注意事项和最佳实践]

## Props

| Prop | Type | Default | Description |
| ---- | ---- | ------- | ----------- |
| [属性名] | `[类型]` | `[默认值]` | [描述] |
...
```

## 目录结构
在生成文档的同时，需要创建相应的组件示例文件：

1. 文档文件: `apps/docs/content/docs/components/[类别]/[组件名称小写].mdx`
2. 示例组件目录: `apps/docs/components/docs/[组件名称小写]/`
   - `usage.tsx`: 基本用法示例组件
   - `[变体名称小写].tsx`: 各个变体示例组件
   - `index.ts`: 导出所有示例组件

### 示例组件目录结构

```
apps/docs/components/docs/[组件名称小写]/
├── usage.tsx            // 基本用法示例
├── [变体名称1].tsx      // 变体1示例
├── [变体名称2].tsx      // 变体2示例
└── index.ts             // 导出所有示例组件
```

### index.ts 示例
```ts
export { default as [组件名称]Usage } from './usage'
export { default as [变体名称1] } from './[变体名称1小写]'
export { default as [变体名称2] } from './[变体名称2小写]'
```

## 组件示例代码结构

每个示例组件文件应该是一个完整的、可独立工作的组件，包含必要的状态管理和交互逻辑。它们应该遵循以下结构：

```tsx
'use client'

import { useRef } from "react"
import { [组件名称] } from "@faiz-ui/react"

export default function [示例名称]() {
  // 必要的状态管理和事件处理逻辑
  const [state, setState] = useState(initialState)
  const handleEvent = () => {
    // 事件处理逻辑
  }
  
  return (
    // JSX 渲染代码
    <div className="...">
      <[组件名称] prop1={value1} prop2={value2} />
    </div>
  )
}
```

## 文件位置
1. 确定组件的类型/用途（如按钮属于actions类别）
2. 将生成的文档保存在`apps/docs/content/docs/components/[类别]/[组件名称小写].mdx`
   - 例如：Button组件的文档保存在`apps/docs/content/docs/components/actions/button.mdx`
   - 可能的类别包括：actions, data-display, feedback, forms, layout, navigation等

## 命名与内容转换规则
1. 组件名称应使用PascalCase（如Button）
2. 文件名和目录名应使用kebab-case（如button.mdx, button/）
3. 示例代码中的内容应与stories中的相符，但可以适当简化
4. 确保所有示例都能在文档页面上正确渲染
5. 中英文翻译：stories是中文的，但是组件文档需要转换成英文

## 实现注意事项文档
为每个组件添加一个"Implementation Notes"部分，详细说明使用该组件时应注意的要点，如：

1. 必需的父元素属性（如position: relative, overflow: hidden）
2. 可访问性考虑因素
3. 性能优化提示
4. 常见用法提示和陷阱

## 其他文档规则

1. 所有onXXX相关的story通常不需要生成！除非这是组件的核心功能。
2. 不要创建过于复杂的示例，保持简洁、清晰和易于理解。
3. 确保每个变体都有清晰的描述和适当的示例。
4. 对于具有多种样式变体的组件，应使用适当的头部结构组织文档。

## 最终检查清单

在完成文档生成后，请进行以下检查：

1. ✅ 是否生成了正确的文档结构和示例组件文件？
2. ✅ 是否排除了不需要的story（如纯交互示例）？
3. ✅ 示例组件是否包含所有必要的状态管理和事件处理逻辑？
4. ✅ 是否已将中文内容转换为英文？
5. ✅ Props表格是否完整、准确？
6. ✅ 是否包含了Implementation Notes部分？

请确保生成的文档风格一致，内容全面，展示了组件的所有功能和变体。 