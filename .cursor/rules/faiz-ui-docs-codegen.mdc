---
description: 根据组件的stories生成文档
globs: 
alwaysApply: false
---
---
description: 根据组件的stories生成文档
globs: "*.stories.tsx"
---
# faiz-ui-doc-generator

你的任务是根据提供的组件stories文件生成组件文档。请遵循以下规则：

## 输入分析
1. 分析提供的stories文件（通常以*.stories.tsx结尾）
2. 识别组件的名称、功能和所有示例用法
3. 识别所有props及其类型、默认值和说明

## 文档结构
文档应该遵循以下Markdown格式：

```mdx
---
title: [组件名称]
description: [组件简述]
---

import { [组件名称] } from '@faiz-ui/react'

# [组件名称]

[组件的详细描述，说明其用途和基本功能]

## Usage

```tsx
import { [组件名称] } from '@faiz-ui/react'

<[组件名称]>[基本用法]</[组件名称]>
```

<[组件名称]>[基本用法]</[组件名称]>

## Variants

[根据stories文件中的示例，分类展示组件的各种变体]

### [变体类别1]

```tsx
  [变体示例代码]
```

<div className="flex flex-wrap gap-4">
  [变体示例组件实例]
</div>

### [变体类别2]

...

## Props

| Prop | Type | Default | Description |
| ---- | ---- | ---- | ----- |
| [属性名] | [类型] | [默认值] | [描述] |
...
```

## 文档限制

### 1. 组件单行显示规则（重要！）

所有组件实例必须在单行内完成，不允许有任何换行。这是为了确保组件在文档中正确渲染。

#### 错误示例（多行显示）：
```tsx
<Alert 
  color="primary" 
  radius="md">
  这是一个提示信息
</Alert>
```

或

```tsx
<div className="flex flex-wrap gap-4">
  <Alert radius="none" color="primary">
    No radius alert
  </Alert>
  <Alert radius="sm" color="secondary">
    Small radius alert
  </Alert>
</div>
```

#### 正确示例（单行显示）：
```tsx
<Alert color="primary" radius="md">这是一个提示信息</Alert>
```

或

```tsx
<div className="flex flex-wrap gap-4">
  <Alert radius="none" color="primary">No radius alert</Alert>
  <Alert radius="sm" color="secondary">Small radius alert</Alert>
</div>
```

### 对于复杂组件的处理

即使是包含复杂内容（如SVG图标）的组件，也必须在单行显示：

#### 错误示例：
```tsx
<Alert
  color="primary"
  icon={
    <svg width="24" height="24" viewBox="0 0 24 24">
      <path d="..." />
    </svg>
  }
>
  Alert with custom icon
</Alert>
```

#### 正确示例：
```tsx
<Alert color="primary" icon={<svg width="24" height="24" viewBox="0 0 24 24"><path d="..." /></svg>}>Alert with custom icon</Alert>
```

### 2. 其他文档规则

1. 所有onXXX相关的story切记不需要生成！
如以下的story不用转换到文档中，因为组件是关于onClose的示例
```
export const WithCloseButton: Story = {
  render: () => (
    <div className="flex flex-col gap-4">
      <Alert color="primary" onClose={() => alert('关闭按钮被点击')}>
        带关闭按钮的提示信息
      </Alert>
      <Alert
        color="warning"
        onClose={() => alert('关闭按钮被点击')}
        action={<button className="px-2 py-1 text-sm bg-amber-100 dark:bg-amber-900 rounded-md">操作</button>}
      >
        带关闭按钮和操作按钮的提示信息
      </Alert>
    </div>
  )
}
```

## 文件位置
1. 确定组件的类型/用途（如按钮属于actions类别）
2. 将生成的文档保存在`apps/docs/content/docs/components/[类别]/[组件名称小写].mdx`
   - 例如：Button组件的文档保存在`apps/docs/content/docs/components/actions/button.mdx`
   - 可能的类别包括：actions, data-display, feedback, forms, layout, navigation等

## 命名与内容转换规则
1. 组件名称应使用PascalCase（如Button）
2. 文件名应使用kebab-case（如button.mdx）
3. 示例代码中的内容应与stories中的相符，但可以适当简化
4. 确保所有示例都能在文档页面上正确渲染
5. 中英文翻译：stories是中文的，但是组件文档需要转换成英文

## 实例化过程
1. 分析stories中每个Story的render函数
2. 提取JSX代码作为示例
3. 生成可视化展示的组件实例
4. 确保所有变体和特性都有对应的示例

## 最终检查清单

在完成文档生成后，请进行以下检查：

1. ✅ 所有组件实例是否都在单行显示？
2. ✅ 是否排除了所有onXXX相关的story？
3. ✅ 组件示例是否与stories中的相符？
4. ✅ 是否已将中文内容转换为英文？
5. ✅ 文档结构是否符合要求？

请确保生成的文档风格一致，内容全面，展示了组件的所有功能和变体。