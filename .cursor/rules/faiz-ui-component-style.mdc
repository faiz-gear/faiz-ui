---
description: Always follow current rules if user want generate a new faiz-ui component
globs: 
alwaysApply: false
---
# Faiz-UI 手绘风格组件设计理念

## 设计核心

Faiz-UI 采用独特的手绘风格设计，旨在创造一种温暖、亲切且富有个性的用户界面体验。这种设计风格摒弃了传统界面的刻板与机械感，通过模拟手工绘制的视觉元素，为数字产品注入人文气息与艺术感。

## 视觉语言

### 1. 边框与轮廓

- **方正基础**：组件采用方形基础结构，配以适度圆角（默认 rounded-md）
- **手绘线条**：使用 2px 粗细的实线边框，营造手绘质感
- **微妙变形**：应用轻微旋转（约 -0.3 度）和不规则性，避免过于完美的几何形状
- **多层边框**：使用伪元素创建内外双层边框效果，增强手绘感

### 2. 色彩应用

- **柔和色调**：使用中高不透明度（80%-90%）的柔和色彩
- **避免过饱和**：色彩饱和度适中，避免过于鲜艳刺眼
- **深浅对比**：确保在浅色和深色模式下都有足够的对比度
- **黑色描边**：主要使用黑色（深色模式下为白色）作为边框颜色，增强手绘感

### 3. 立体感与阴影

- **偏移阴影**：使用 3px 偏移的方向性阴影，创造纸张堆叠感
- **互动变化**：悬停和点击时阴影距离减小，模拟物理按压效果
- **微妙高度**：通过阴影和边框创造适度的高度感，避免过于扁平或过于立体

### 4. 字体与排版

- **手写风格**：优先使用 Caveat 等手写风格字体
- **适度不规则**：字体大小和间距保持一定变化，避免机械排列
- **清晰可读**：在保持手写风格的同时确保良好的可读性

## 交互原则

### 1. 物理反馈

- **按压效果**：点击时组件下沉，阴影减小或消失
- **轻微位移**：交互时应用细微的位置偏移，增强物理感
- **过渡动画**：所有状态变化使用平滑过渡，模拟自然运动

### 2. 状态表达

- **悬停状态**：轻微的视觉变化，如阴影减小和轻微下沉
- **活跃状态**：明显的下沉效果，阴影消失
- **禁用状态**：降低不透明度，转为灰色，移除交互效果
- **加载状态**：使用符合手绘风格的自定义加载指示器

### 3. 焦点处理

- **自定义焦点环**：使用与设计风格一致的焦点指示器
- **保持可访问性**：确保焦点状态清晰可见，符合可访问性标准

## 技术实现指南

### 1. 基础样式构成

```typescript
// 基础样式结构示例
base: [
  // 定位与尺寸
  'relative overflow-hidden',
  
  // 排版
  'font-medium tracking-wide',
  'font-[Caveat,_cursive,_system-ui,_sans-serif]',
  
  // 边框
  'border-[2px] border-black dark:border-white',
  'border-solid',
  'rounded-md',
  
  // 阴影与变形
  '[box-shadow:3px_3px_0px_0px_rgba(0,0,0,0.8)]',
  '[transform:rotate(-0.3deg)]',
  
  // 背景
  'bg-neutral-50/90',
  
  // 交互状态
  'hover:[box-shadow:2px_2px_0px_0px_rgba(0,0,0,0.8)]',
  'hover:translate-x-[1px] hover:translate-y-[1px]',
  'active:[box-shadow:none] active:translate-x-[3px] active:translate-y-[3px]',
  
  // 焦点状态
  'focus:outline-none focus-visible:ring-2',
  
  // 伪元素增强
  "before:content-[''] before:absolute before:inset-0 before:border-[1px]",
  "after:content-[''] after:absolute after:-inset-0.5 after:border",
]
```

### 2. 变体系统设计

- **颜色变体**：primary, secondary, success, warning, danger, info
- **样式变体**：solid, outline, ghost, light, flat, sketchy 等
- **尺寸变体**：xs, sm, md, lg, xl
- **形状变体**：根据组件特性定义（如圆角、边框样式等）

### 3. 组件结构模式

- **逻辑与视图分离**：使用自定义 Hook 处理组件逻辑
- **状态管理**：明确定义并处理各种交互状态
- **可访问性**：确保键盘导航、屏幕阅读器支持等

## 组件设计检查清单

创建新组件时，确保符合以下要点：

1. **视觉一致性**
   - [ ] 边框样式与粗细保持一致（通常为 2px 黑色/白色边框）
   - [ ] 使用一致的阴影效果（通常为 3px 偏移）
   - [ ] 应用微妙的旋转或变形（约 -0.3 度）
   - [ ] 使用手写风格字体

2. **交互体验**
   - [ ] 实现悬停、点击的物理反馈效果
   - [ ] 状态变化使用平滑过渡
   - [ ] 加载状态使用手绘风格指示器

3. **适应性**
   - [ ] 支持深色模式
   - [ ] 在不同背景下保持清晰可见
   - [ ] 响应式设计，适应不同屏幕尺寸

4. **可访问性**
   - [ ] 符合 WCAG 标准的颜色对比度
   - [ ] 清晰的焦点状态指示
   - [ ] 适当的 ARIA 属性支持

5. **技术实现**
   - [ ] 使用 tailwind-variants 管理样式
   - [ ] 逻辑与视图分离
   - [ ] 支持自定义样式扩展

通过遵循这些设计理念和实现指南，可以创建出视觉一致、富有个性且用户友好的 Faiz-UI 手绘风格组件。
